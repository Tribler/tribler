name: Build
on: workflow_dispatch
jobs:
  build:
    strategy:
      matrix:
        include:  # macos-12 is no longer on GitHub Actions, we use the Mac mini for this
          - os: ubuntu-22.04
            architecture: x64
          - os: ubuntu-latest
            architecture: aarch64
          - os: windows-latest
            architecture: x64
    runs-on: ${{ matrix.os }}
    steps:

      ########################################
      # NSIS installer (Windows, always x86) #
      ########################################
      - name: Install NSIS
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest https://deac-riga.dl.sourceforge.net/project/nsis/NSIS%203/3.10/nsis-3.10.zip?viasf=1 -OutFile C:\WINDOWS\Temp\nsis-3.10.zip
          Expand-Archive -LiteralPath "C:\WINDOWS\Temp\nsis-3.10.zip" -DestinationPath "C:\WINDOWS\Temp\unzip-nsis-3.10"
          Move-Item -Path "C:\WINDOWS\Temp\unzip-nsis-3.10\nsis-3.10" -Destination "C:\Program Files (x86)\NSIS"
      - name: Check out SimpleFC repository (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/checkout@v4
        with:
          repository: mazinsw/SimpleFC
      - name: Build SimpleFC NSIS Plugin (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy "bin\x86-unicode\SimpleFC.dll" "C:\Program Files (x86)\NSIS\Plugins\x86-unicode\SimpleFC.dll"
      - name: Check out nsProcess repository (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/checkout@v4
        with:
          repository: simdsoft/nsProcess
          submodules: 'true'
      - name: Add msbuild to PATH (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
      - name: Build nsProcess NSIS Plugin (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd nsProcess
          msbuild nsProcess.vcxproj /p:PlatformToolset=v143 /p:Configuration="Release UNICODE"
          copy "Release UNICODE\nsProcess.dll" "C:\Program Files (x86)\NSIS\Plugins\x86-unicode\nsProcess.dll"
          cd ../Include
          New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Include"
          copy nsProcess.nsh "C:\Program Files (x86)\NSIS\Include\nsProcess.nsh"

      #######################
      # Package preparation #
      #######################
      - name: Check-out repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-tags: 'true'
      - name: Remove test files
        shell: bash
        run: |
          rm -rf doc
          rm -rf scripts

          rm src/run_unit_tests.py
          rm -rf src/tribler/test_integration
          rm -rf src/tribler/test_unit

          rm -rf pyipv8/.github
          rm pyipv8/.gitignore
          rm pyipv8/.gitmodules
          rm pyipv8/.readthedocs.yaml
          rm pyipv8/.ruff.toml
          rm pyipv8/*.md
          rm pyipv8/*.ini
          rm pyipv8/create_test_coverage_report.py
          rm pyipv8/github_increment_version.py
          rm pyipv8/run_all_tests.py
          rm pyipv8/setup.py
          rm -rf pyipv8/doc
          rm -rf pyipv8/scripts
          rm -rf pyipv8/stresstest
          rm -rf pyipv8/systemd
          rm -rf pyipv8/ipv8/test
      - name: Setup Python ${{ matrix.architecture }}
        if: matrix.architecture != 'aarch64'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: ${{ matrix.architecture }}
          cache: 'pip'
          cache-dependency-path: |
            **/build/requirements.txt
      - name: Install Dependencies
        if: matrix.architecture != 'aarch64'
        run: |
          pip install --upgrade -r build/requirements.txt
      - name: Setup npm
        uses: actions/setup-node@v4
      - name: Build npm
        shell: bash
        run: |
          cd src/tribler/ui/
          npm install
          npm run build
          rm -rf node_modules
      - name: Determine release tag
        shell: bash
        run: |
          git fetch --no-tags origin 'refs/tags/v*:refs/tags/v*'
          git for-each-ref --count=1 --sort=-creatordate --format '%(refname)' refs/tags > raw_tag.txt
          GITHUB_TAG=$(git name-rev --tags --name-only $(cat raw_tag.txt))
          echo "GITHUB_TAG=${GITHUB_TAG#v}" >> $GITHUB_ENV

      #####################
      # Individual builds #
      #####################
      - name: Build Executables (Ubuntu x64)
        if: matrix.os == 'ubuntu-22.04' && matrix.architecture == 'x64'
        run: |
          sudo apt-get update -q -y
          sudo apt-get install -y --allow-downgrades alien devscripts fakeroot gir1.2-gtk-3.0 libgirepository1.0-dev rpm
          ./build/debian/makedist_debian.sh
          
          cd build/debian
          sudo apt-get install -y --fix-broken ./tribler_${GITHUB_TAG}_all.deb
          timeout 10s tribler -s || true
          cat /tmp/*tribler*.log
          
          mv tribler_${GITHUB_TAG}_all.deb tribler_${GITHUB_TAG}_${{ matrix.architecture }}.deb

      - name: Build Executables (Ubuntu aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.architecture == 'aarch64'
        uses: uraimo/run-on-arch-action@v3
        id: run_ubuntu_aarch64
        with:
          arch: ${{ matrix.architecture }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/tribler"
          env: |
            GITHUB_TAG: ${{ env.GITHUB_TAG }}
          shell: /bin/sh
          install: |
            apt-get update -q -y
            apt-get install -q -y software-properties-common
            add-apt-repository -u ppa:deadsnakes/ppa
            apt-get install -q -y curl debhelper devscripts gir1.2-gtk-4.0 libgirepository1.0-dev python3.12-dev libcairo2-dev
          run: |
            curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3.12 get-pip.py
            python3.12 -m pip install --upgrade -r /tribler/build/requirements.txt
            python3.12 -m pip install meson ninja

            cd /tribler
            export PATH="/usr/local/bin:$PATH"
            unlink /usr/bin/python3
            ln -s $(echo "`which python3.12`") /usr/bin/python3
            ./build/debian/makedist_debian.sh

            cd build/debian
            apt-get install -y --fix-broken ./tribler_${GITHUB_TAG}_all.deb
            timeout 10s tribler -s || true
            cat /tmp/*tribler*.log
            
            mv tribler_${GITHUB_TAG}_all.deb tribler_${GITHUB_TAG}_${{ matrix.architecture }}.deb

      - name: Build Executables (MacOS-12)
        if: matrix.os == 'macos-12'
        run: |
          mv ./build/tribler.spec ./tribler.spec
          ./build/mac/makedist_macos.sh

      - name: Fetch libsodium.dll (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install libsodium
          Copy C:/vcpkg/packages/libsodium_x64-windows/bin/libsodium.dll src/libsodium.dll
      - name: Fetch old OpenSSL for libtorrent (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Remove-Item -Path "C:\Program Files\OpenSSL" -Force -Recurse
          Write-Output '{"$schema": "https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json","dependencies": ["openssl"],"overrides": [{"name": "openssl","version-string": "1.1.1n"}]}' | Out-File -FilePath ".\vcpkg.json"
          vcpkg x-update-baseline --add-initial-baseline
          vcpkg install
          New-Item -Path "C:\Program Files\OpenSSL" -ItemType SymbolicLink -Value "C:\vcpkg\packages\openssl_x64-windows\"
      - name: Build Executables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./build/win/makedist_win.bat

      ################################
      # Cleanup and artifact uploads #
      ################################
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} ${{ matrix.architecture }} Build
          path: |
            dist/*.exe
            dist/*.dmg
            build/debian/*.deb
