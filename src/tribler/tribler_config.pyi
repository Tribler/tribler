from pathlib import Path
from typing import Literal, NotRequired, TypedDict, overload

# ruff: noqa: PYI021

VERSION_SUBDIR: str

IPv8BootstrapperConfig = TypedDict("IPv8BootstrapperConfig", {
    "class": str,
    "init": dict
})

IPv8OverlayConfig = TypedDict("IPv8OverlayConfig", {
    "class": str,
    "key": str,
    "walkers": list[IPv8WalkerConfig],
    "bootstrappers": list[IPv8BootstrapperConfig],
    "initialize": dict,
    "on_start": list
})

class ApiConfig(TypedDict):
    """
    Settings for the API key component.
    """

    key: str
    http_enabled: bool
    http_port: int
    http_host: str
    https_enabled: bool
    https_host: str
    https_port: int
    https_certfile: str
    http_port_running: int
    https_port_running: int

class ContentDiscoveryCommunityConfig(TypedDict):
    """
    Settings for the content discovery component.
    """

    enabled: bool

class DatabaseConfig(TypedDict):
    """
    Settings for the database component.
    """

    enabled: bool

class DownloadDefaultsConfig(TypedDict):
    """
    Settings for default downloads, used by libtorrent.
    """

    anonymity_enabled: bool
    number_hops: int
    safeseeding_enabled: bool
    saveas: str
    seeding_mode: str
    seeding_ratio: float
    seeding_time: float
    channel_download: bool
    add_download_to_channel: bool
    trackers_file: str
    torrent_folder: str
    auto_managed: bool
    completed_dir: str

class IPv8Config(TypedDict):
    """
    The main IPv8 configuration dictionary.
    """

    interfaces: list[IPv8InterfaceConfig]
    keys: list[IPv8KeysConfig]
    logger: IPv8LoggerConfig
    working_directory: str
    walker_interval: float
    overlays: list[IPv8OverlayConfig]

class IPv8InterfaceConfig(TypedDict):
    """
    An IPv8 network interface.
    """

    interface: str
    ip: str
    port: int
    worker_threads: NotRequired[int]

class IPv8KeysConfig(TypedDict):
    """
    An IPv8 key configuration.
    """

    alias: str
    generation: str
    file: str

class IPv8LoggerConfig(TypedDict):
    """
    The IPv8 logger configuration.
    """

    level: str

class IPv8WalkerConfig(TypedDict):
    """
    An IPv8 walker configuration.
    """

    strategy: str
    peers: int
    init: dict

class LibtorrentConfig(TypedDict):
    """
    Settings for the libtorrent component.
    """

    socks_listen_ports: list[int]
    listen_interface: str
    port: int
    proxy_type: int
    proxy_server: str
    proxy_auth: str
    max_connections_download: int
    max_download_rate: int
    max_upload_rate: int
    utp: bool
    dht: bool
    dht_readiness_timeout: int
    upnp: bool
    natpmp: bool
    lsd: bool
    announce_to_all_tiers: bool
    announce_to_all_trackers: bool
    max_concurrent_http_announces: int
    check_after_complete: bool

    download_defaults: DownloadDefaultsConfig

    active_downloads: int
    active_seeds: int
    active_checking: int
    active_dht_limit: int
    active_tracker_limit: int
    active_lsd_limit: int
    active_limit: int

    ask_download_settings: bool

class RSSConfig(TypedDict):
    """
    Settings for the rss component.
    """

    enabled: bool
    urls: list[str]

class RecommenderConfig(TypedDict):
    """
    Settings for the user recommender component.
    """

    enabled: bool

class RendezvousConfig(TypedDict):
    """
    Settings for the rendezvous component.
    """

    enabled: bool

class TorrentCheckerConfig(TypedDict):
    """
    Settings for the torrent checker component.
    """

    enabled: bool

class TriblerConfig(TypedDict):
    """
    The main Tribler settings and all of its components' sub-settings.
    """

    api: ApiConfig
    headless: bool

    ipv8: IPv8Config
    statistics: bool

    content_discovery_community: ContentDiscoveryCommunityConfig
    database: DatabaseConfig
    libtorrent: LibtorrentConfig
    recommender: RecommenderConfig
    rendezvous: RendezvousConfig
    rss: RSSConfig
    torrent_checker: TorrentCheckerConfig
    tunnel_community: TunnelCommunityConfig
    versioning: VersioningConfig
    watch_folder: WatchFolderConfig

    state_dir: str
    memory_db: bool
    tray_icon_color: str

class TunnelCommunityConfig(TypedDict):
    """
    Settings for the tunnel community component.
    """

    enabled: bool
    min_circuits: int
    max_circuits: int

class VersioningConfig(TypedDict):
    """
    Settings for the versioning component.
    """

    enabled: bool

class WatchFolderConfig(TypedDict):
    """
    Settings for the watch folder component.
    """

    enabled: bool
    directory: str
    check_interval: float


class TriblerConfigManager:

    configuration: TriblerConfig
    config_file: Path

    def __init__(self, config_file: Path = ...) -> None: ...
    def write(self) -> None: ...
    def get_version_state_dir(self) -> str: ...

    @overload
    def set(self, option: Literal["api"], value: ApiConfig) -> None: ...
    @overload
    def set(self, option: Literal["headless"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["ipv8"], value: IPv8Config) -> None: ...
    @overload
    def set(self, option: Literal["statistics"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["content_discovery_community"], value: ContentDiscoveryCommunityConfig) -> None: ...
    @overload
    def set(self, option: Literal["database"], value: DatabaseConfig) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent"], value: LibtorrentConfig) -> None: ...
    @overload
    def set(self, option: Literal["recommender"], value: RecommenderConfig) -> None: ...
    @overload
    def set(self, option: Literal["rendezvous"], value: RendezvousConfig) -> None: ...
    @overload
    def set(self, option: Literal["rss"], value: RSSConfig) -> None: ...
    @overload
    def set(self, option: Literal["torrent_checker"], value: TorrentCheckerConfig) -> None: ...
    @overload
    def set(self, option: Literal["tunnel_community"], value: TunnelCommunityConfig) -> None: ...
    @overload
    def set(self, option: Literal["versioning"], value: VersioningConfig) -> None: ...
    @overload
    def set(self, option: Literal["watch_folder"], value: WatchFolderConfig) -> None: ...
    @overload
    def set(self, option: Literal["state_dir"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["memory_db"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["tray_icon_color"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["api/key"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["api/http_enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["api/http_port"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["api/http_host"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["api/https_enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["api/https_host"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["api/https_port"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["api/https_certfile"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["api/http_port_running"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["api/https_port_running"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/interfaces"], value: list[IPv8InterfaceConfig]) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/keys"], value: list[IPv8KeysConfig]) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/logger"], value: IPv8LoggerConfig) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/working_directory"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/walker_interval"], value: float) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays"], value: list[IPv8OverlayConfig]) -> None: ...
    @overload
    def set(self, option: Literal["content_discovery_community/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["database/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/socks_listen_ports"], value: list[int]) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/listen_interface"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/port"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/proxy_type"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/proxy_server"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/proxy_auth"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/max_connections_download"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/max_download_rate"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/max_upload_rate"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/utp"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/dht"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/dht_readiness_timeout"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/upnp"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/natpmp"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/lsd"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/announce_to_all_tiers"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/announce_to_all_trackers"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/max_concurrent_http_announces"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/check_after_complete"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults"], value: DownloadDefaultsConfig) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_downloads"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_seeds"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_checking"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_dht_limit"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_tracker_limit"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_lsd_limit"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/active_limit"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/ask_download_settings"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["recommender/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["rendezvous/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["rss/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["rss/urls"], value: list[str]) -> None: ...
    @overload
    def set(self, option: Literal["torrent_checker/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["tunnel_community/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["tunnel_community/min_circuits"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["tunnel_community/max_circuits"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["versioning/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["watch_folder/enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["watch_folder/directory"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["watch_folder/check_interval"], value: float) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/interfaces/interface"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/interfaces/ip"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/interfaces/port"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/keys/alias"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/keys/generation"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/keys/file"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/logger/level"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/class"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/key"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/walkers"], value: list[IPv8WalkerConfig]) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/bootstrappers"], value: list[IPv8BootstrapperConfig]) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/initialize"], value: dict) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/on_start"], value: list) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/anonymity_enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/number_hops"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/safeseeding_enabled"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/saveas"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/seeding_mode"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/seeding_ratio"], value: float) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/seeding_time"], value: float) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/channel_download"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/add_download_to_channel"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/trackers_file"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/torrent_folder"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/auto_managed"], value: bool) -> None: ...
    @overload
    def set(self, option: Literal["libtorrent/download_defaults/completed_dir"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/walkers/strategy"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/walkers/peers"], value: int) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/walkers/init"], value: dict) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/bootstrappers/class"], value: str) -> None: ...
    @overload
    def set(self, option: Literal["ipv8/overlays/bootstrappers/init"], value: dict) -> None: ...

    @overload
    def get(self, option: Literal["api"]) -> ApiConfig: ...
    @overload
    def get(self, option: Literal["headless"]) -> bool: ...
    @overload
    def get(self, option: Literal["ipv8"]) -> IPv8Config: ...
    @overload
    def get(self, option: Literal["statistics"]) -> bool: ...
    @overload
    def get(self, option: Literal["content_discovery_community"]) -> ContentDiscoveryCommunityConfig: ...
    @overload
    def get(self, option: Literal["database"]) -> DatabaseConfig: ...
    @overload
    def get(self, option: Literal["libtorrent"]) -> LibtorrentConfig: ...
    @overload
    def get(self, option: Literal["recommender"]) -> RecommenderConfig: ...
    @overload
    def get(self, option: Literal["rendezvous"]) -> RendezvousConfig: ...
    @overload
    def get(self, option: Literal["rss"]) -> RSSConfig: ...
    @overload
    def get(self, option: Literal["torrent_checker"]) -> TorrentCheckerConfig: ...
    @overload
    def get(self, option: Literal["tunnel_community"]) -> TunnelCommunityConfig: ...
    @overload
    def get(self, option: Literal["versioning"]) -> VersioningConfig: ...
    @overload
    def get(self, option: Literal["watch_folder"]) -> WatchFolderConfig: ...
    @overload
    def get(self, option: Literal["state_dir"]) -> str: ...
    @overload
    def get(self, option: Literal["memory_db"]) -> bool: ...
    @overload
    def get(self, option: Literal["tray_icon_color"]) -> str: ...
    @overload
    def get(self, option: Literal["api/key"]) -> str: ...
    @overload
    def get(self, option: Literal["api/http_enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["api/http_port"]) -> int: ...
    @overload
    def get(self, option: Literal["api/http_host"]) -> str: ...
    @overload
    def get(self, option: Literal["api/https_enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["api/https_host"]) -> str: ...
    @overload
    def get(self, option: Literal["api/https_port"]) -> int: ...
    @overload
    def get(self, option: Literal["api/https_certfile"]) -> str: ...
    @overload
    def get(self, option: Literal["api/http_port_running"]) -> int: ...
    @overload
    def get(self, option: Literal["api/https_port_running"]) -> int: ...
    @overload
    def get(self, option: Literal["ipv8/interfaces"]) -> list[IPv8InterfaceConfig]: ...
    @overload
    def get(self, option: Literal["ipv8/keys"]) -> list[IPv8KeysConfig]: ...
    @overload
    def get(self, option: Literal["ipv8/logger"]) -> IPv8LoggerConfig: ...
    @overload
    def get(self, option: Literal["ipv8/working_directory"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/walker_interval"]) -> float: ...
    @overload
    def get(self, option: Literal["ipv8/overlays"]) -> list[IPv8OverlayConfig]: ...
    @overload
    def get(self, option: Literal["content_discovery_community/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["database/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/socks_listen_ports"]) -> list[int]: ...
    @overload
    def get(self, option: Literal["libtorrent/listen_interface"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/port"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/proxy_type"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/proxy_server"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/proxy_auth"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/max_connections_download"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/max_download_rate"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/max_upload_rate"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/utp"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/dht"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/dht_readiness_timeout"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/upnp"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/natpmp"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/lsd"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/announce_to_all_tiers"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/announce_to_all_trackers"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/max_concurrent_http_announces"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/check_after_complete"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults"]) -> DownloadDefaultsConfig: ...
    @overload
    def get(self, option: Literal["libtorrent/active_downloads"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/active_seeds"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/active_checking"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/active_dht_limit"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/active_tracker_limit"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/active_lsd_limit"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/active_limit"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/ask_download_settings"]) -> bool: ...
    @overload
    def get(self, option: Literal["recommender/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["rendezvous/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["rss/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["rss/urls"]) -> list[str]: ...
    @overload
    def get(self, option: Literal["torrent_checker/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["tunnel_community/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["tunnel_community/min_circuits"]) -> int: ...
    @overload
    def get(self, option: Literal["tunnel_community/max_circuits"]) -> int: ...
    @overload
    def get(self, option: Literal["versioning/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["watch_folder/enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["watch_folder/directory"]) -> str: ...
    @overload
    def get(self, option: Literal["watch_folder/check_interval"]) -> float: ...
    @overload
    def get(self, option: Literal["ipv8/interfaces/interface"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/interfaces/ip"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/interfaces/port"]) -> int: ...
    @overload
    def get(self, option: Literal["ipv8/keys/alias"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/keys/generation"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/keys/file"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/logger/level"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/class"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/key"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/walkers"]) -> list[IPv8WalkerConfig]: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/bootstrappers"]) -> list[IPv8BootstrapperConfig]: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/initialize"]) -> dict: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/on_start"]) -> list: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/anonymity_enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/number_hops"]) -> int: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/safeseeding_enabled"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/saveas"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/seeding_mode"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/seeding_ratio"]) -> float: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/seeding_time"]) -> float: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/channel_download"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/add_download_to_channel"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/trackers_file"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/torrent_folder"]) -> str: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/auto_managed"]) -> bool: ...
    @overload
    def get(self, option: Literal["libtorrent/download_defaults/completed_dir"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/walkers/strategy"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/walkers/peers"]) -> int: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/walkers/init"]) -> dict: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/bootstrappers/class"]) -> str: ...
    @overload
    def get(self, option: Literal["ipv8/overlays/bootstrappers/init"]) -> dict: ...
