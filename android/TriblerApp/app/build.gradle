// Automatically increment version code by 1 each build
def Properties versionProps = new Properties()
def versionPropsFile = file('version.properties')
if (versionPropsFile.exists())
    versionProps.load(new FileInputStream(versionPropsFile))
def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
versionProps['VERSION_CODE'] = code.toString()
versionProps.store(versionPropsFile.newWriter(), null)

// Gradle experimental format
apply plugin: 'com.android.model.application'

model {
    android {
        // Use latest and greatest version
        compileSdkVersion 24
        buildToolsVersion "24.0.2"

        defaultConfig {
            applicationId "org.tribler.android"
            // Android Beam supports large payload transfers
            // over Bluetooth since api level 16
            minSdkVersion.apiLevel 16
            // Compatible up to api level 23
            // Avoid new strict file security measures of api level 24
            targetSdkVersion.apiLevel 23
            // Auto increment, see above
            versionCode code
            // Used for python files versioning
            versionName "build " + code
            // Backwards compatibility for vector graphics
            vectorDrawables.useSupportLibrary = true
            // Java 8 features
            jackOptions {
                enabled = true
            }
            // Gradle experimental create build
            buildConfigFields {
                create() {
                    type "int"
                    name "VALUE"
                    value "1"
                }
            }
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        // NDK config mirrors python-for-android toolchain config
        ndk {
            abiFilters.add("armeabi-v7a")
            moduleName = "main"
            toolchain = "gcc"
            toolchainVersion = "4.9"
            platformVersion = 16
            stl = "gnustl_shared"
            renderscriptNdkMode = false
            CFlags.add("-I" + file("src/main/jni/include/python2.7"))
            ldFlags.add("-L" + file("src/main/jni/lib"))
            ldLibs.addAll(["log", "python2.7"])
        }
        // Configures source set directory.
        sources {
            main {
                // All native code is already compiled and in jniLibs
                // start.c and pyjniusjni.c are still required for jni
                jni {
                    source {
                        exclude "**/winsock_pointers.c"
                        exclude "**/iocpsupport.c"
                        exclude "**/portmap.c"
                    }
                }
                // References prebuilt libraries defined below
                jniLibs {
                    dependencies {
                        library "gnustl_shared"
                        library "boost_system"
                        library "boost_date_time"
                        library "boost_python"
                        library "crypto"
                        library "ssl"
                        library "ffi"
                        library "sodium"
                        library "torrent_rasterbar"
                        library "leveldb"
                        library "sqlite3"
                        // VLC
                        library "cpp_shared"
                        library "anw10"
                        library "anw13"
                        library "anw14"
                        library "anw18"
                        library "anw21"
                        library "compat7"
                        library "iomx10"
                        library "iomx13"
                        library "iomx14"
                        library "vlc"
                        library "vlc_jni"
                    }
                }
            }
        }
    }
    repositories {
        // Prebuilt with python-for-android toolchain
        libs(PrebuiltLibraries) {
            gnustl_shared {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libgnustl_shared.so")
                }
            }
            boost_date_time {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libboost_date_time.so")
                }
            }
            boost_python {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libboost_python.so")
                }
            }
            boost_system {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libboost_system.so")
                }
            }
            crypto {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libcrypto1.0.2h.so")
                }
            }
            ssl {
                binaries.withType(SharedLibraryBinary) {
                    // Android does not have regular versioning of .so files, but ships with an
                    // old version of openssl which prevents the loading libssl.so bundled with
                    // the app, therefore a custom name with version is introduced
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libssl1.0.2h.so")
                }
            }
            ffi {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libffi.so")
                }
            }
            sodium {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libsodium.so")
                }
            }
            torrent_rasterbar {
                binaries.withType(SharedLibraryBinary) {
                    // When the python bindings shared library and the native one have the same name
                    // it causes a cyclic dependency reference on runtime, therefore the native
                    // .so file was renamed to include _rasterbar
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libtorrent_rasterbar.so")
                }
            }
            leveldb {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libleveldb.so")
                }
            }
            sqlite3 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libsqlite3.so")
                }
            }
            // VLC binaries
            cpp_shared {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libc++_shared.so")
                }
            }
            anw10 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libanw.10.so")
                }
            }
            anw13 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libanw.13.so")
                }
            }
            anw14 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libanw.14.so")
                }
            }
            anw18 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libanw.18.so")
                }
            }
            anw21 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libanw.21.so")
                }
            }
            compat7 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libcompat.7.so")
                }
            }
            iomx10 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libiomx.10.so")
                }
            }
            iomx13 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libiomx.13.so")
                }
            }
            iomx14 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libiomx.14.so")
                }
            }
            vlc {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libvlc.so")
                }
            }
            vlc_jni {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("src/main/jniLibs/armeabi-v7a/libvlcjni.so")
                }
            }
        }
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile fileTree(include: ['*.jar'], dir: 'jniLibs')

    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
    compile 'com.android.support:recyclerview-v7:24.2.1'
    compile 'com.android.support:cardview-v7:24.2.1'

    compile 'com.google.code.gson:gson:2.7'
    compile 'xyz.danoz:recyclerviewfastscroller:0.1.3'
    compile 'com.github.medyo:fancybuttons:1.8.1'
    compile 'com.jakewharton:butterknife:8.4.0'

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.0'
    compile 'com.cantrowitz:rxbroadcast:1.0.0'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-support-v4:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-design:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-recyclerview-v7:0.4.0'

    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

    //DEBUG
    compile 'com.facebook.stetho:stetho:1.4.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'
    compile 'com.squareup.leakcanary:leakcanary-android:1.4'
    //compile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4'

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    androidTestCompile 'com.android.support:support-annotations:24.2.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4'
}
